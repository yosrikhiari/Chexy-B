spring.application.name=ChessMystic
# Server port (different from your frontend)
server.port=8081

# ===============================
# H2 DATABASE CONFIGURATION (Development)
# ===============================
# In-memory database (data lost on restart)
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=


# Swagger Configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.tryItOutEnabled=true
springdoc.swagger-ui.filter=true
springdoc.swagger-ui.display-request-duration=true
springdoc.swagger-ui.persistAuthorization=true



# Alternative: File-based H2 (data persists)
# spring.datasource.url=jdbc:h2:file:./data/chessmystic
# spring.datasource.driver-class-name=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=

# Enable H2 Console for debugging (accessible at http://localhost:8081/h2-console)
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console

# ===============================
# MONGODB CONFIGURATION (Optional - comment out if not using)
# ===============================
# If MongoDB is not running, comment out these lines to avoid connection errors
spring.data.mongodb.uri=mongodb://mongo_user:mongo_password@localhost:27017/chessmystic?authSource=admin
spring.data.mongodb.database=chessmystic

# Alternative: Disable MongoDB auto-configuration if not needed
# spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration

# CORS configuration
spring.mvc.cors.allowed-origins=http://localhost:3000,http://localhost:8080,http://keycloak:8080
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.mvc.cors.allow-credentials=true

# ===============================
# JPA / HIBERNATE CONFIGURATION
# ===============================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.jpa.show-sql=true
# Changed from MySQL8Dialect to H2Dialect
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.batch_size=10

# Disable Flyway (since you want Hibernate to handle schema)
spring.flyway.enabled=false

# ===============================
# KEYCLOAK OAUTH2 CONFIGURATION
# ===============================
spring.security.oauth2.client.registration.keycloak.client-id=chessid
spring.security.oauth2.client.registration.keycloak.client-secret=AEm91LQVgWiA8R4ElOdvL9z3SyIDOo0l
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email

spring.security.oauth2.client.provider.keycloak.issuer-uri=${keycloak.server-url}/realms/${keycloak.realm}

spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${keycloak.server-url}/realms/${keycloak.realm}/protocol/openid-connect/certs

# ===============================
# OPTIONAL: KEYCLOAK ADMIN CLIENT (IF USED FOR PROGRAMMATIC ACCESS)
# ===============================
# Only needed if your app is managing users/roles via Keycloak Admin API
keycloak.server-url=http://localhost:8080
keycloak.realm=chess
keycloak.client-id=chessid
keycloak.client-secret=AEm91LQVgWiA8R4ElOdvL9z3SyIDOo0l
keycloak.admin-username=chessnewadmin
keycloak.admin-password=admin

# ===============================
# GOOGLE OAUTH2 CONFIGURATION (OPTIONAL)
# ===============================
google.client-id=957968052620-91n5o5bojqnf8mad9ghmhllhjl4r658m.apps.googleusercontent.com

# ===============================
# FILE UPLOAD CONFIGURATION
# ===============================
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

# ===============================
# LOGGING CONFIGURATION
# ===============================
logging.level.tn.esprit.spring.connectn=DEBUG
logging.level.org.springframework.transaction=TRACE
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# ===============================
# EMAIL CONFIGURATION
# ===============================
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=ChessMystic.mail@gmail.com
spring.mail.password=
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# Additional properties to improve deliverability
spring.mail.properties.mail.smtp.from=ChessMystic.mail@gmail.com
spring.mail.properties.mail.smtp.socketFactory.port=587
spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory

# ===============================
# HUGGINGFACE CONFIGURATION
# ===============================
huggingface.token=${HUGGINGFACE_TOKEN}


# ===============================
# RASA CONFIGURATION
# ===============================
rasa.server.url=http://localhost:5005
rasa.actions.url=http://localhost:5055/webhook


